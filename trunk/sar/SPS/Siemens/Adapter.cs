
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Net.Sockets;

using sar.Tools;

namespace sar.SPS.Siemens
{
	public enum AddressArea : byte { P = 0x80, I = 0x81, Q = 0x82, M = 0x83, DB = 0x84, DI = 0x85, L = 0x86, VL = 0x87 };
	public enum Action : byte { Read = 0x4, Write = 0x5 };
	public enum TransportType : byte { Bit = 0x1, Byte = 0x2, Word = 0x4 };
	
	public class Adapter
	{
		private string ipAddress;
		private TcpClient socket;
		private NetworkStream stream;
		
		private static readonly byte[] CONNECT_TO_ADAPTER = 	new byte[] { 0x11, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC0, 0x01, 0x09, 0xC1, 0x02, 0x4B, 0x54, 0xC2, 0x02, 0x03, 0x02 };
		private static readonly byte[] CONNECTED_TO_ADAPTER =	new byte[] { 0x11, 0xD0, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x09, 0xC1, 0x02, 0x4B, 0x54, 0xC2, 0x02, 0x03, 0x02 };
		private static readonly byte[] TPKT_CONNECTION =		new byte[] { 0x03, 0x00, 0x00, 0x16 };
		
		public Adapter(string ipAddress)
		{
			this.ipAddress = ipAddress;
			this.Connect();
			//TODO: check if connection is established, handle retrys... possibly use a timed loop
		}
		
		private bool Connect()
		{
			// open a TCP connection to S7 via port 102
			this.socket = new TcpClient(this.ipAddress, 102);
			this.stream = this.socket.GetStream();

			// write data to socket
			byte[] packetBytes = IO.Combine(TPKT_CONNECTION, CONNECT_TO_ADAPTER);
			stream.Write(packetBytes, 0, packetBytes.Length);

			// wait for responce
			byte[] responce = new byte[22];
			int responceSize = stream.Read(responce, 0, responce.Length);
			
			return responce.SequenceEqual(CONNECTED_TO_ADAPTER);
		}
		
		private byte[] ReadWriteMessage(Action action, AddressArea addressArea, UInt16 dataBlock, UInt32 startAddress)
		{
			byte[] message = new byte[] {(byte)action, 0x1};
			
			// item helder
			message = IO.Combine(message, new byte[] { 0x12, 0x0A, 0x10 });
			
			// transport type
			message = IO.Combine(message, new byte[]  { (byte)TransportType.Byte });
			                     
		
		return message;
	}
	
	private int ReadInt()
	{
		return 0;
	}
	/*
Trying to read 16 bytes from FW0.
PDU header:
                            0:0x32,0x01,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,

plen: 14 dlen: 0
Parameter:
                            0:0x04,0x01,0x12,0x0A,0x10,0x02,0x00,0x10,0x00,0x00,0x83,0x00,0x00,0x00,
_daveExchange PDU number: 65537
IF1 enter _daveExchangeTCP
send packet: :
                            0:0x03,0x00,0x00,0x1F,0x02,0xF0,0x80,0x32,0x01,0x00,0x00,0x00,0x01,0x00,0x0E,0x00,
                            10:0x00,0x04,0x01,0x12,0x0A,0x10,0x02,0x00,0x10,0x00,0x00,0x83,0x00,0x00,0x00,
readISOpacket: 41 bytes read, 41 needed
readISOpacket: packet:
                            0:0x03,0x00,0x00,0x29,0x02,0xF0,0x80,0x32,0x03,0x00,0x00,0x00,0x01,0x00,0x02,0x00,
                            10:0x14,0x00,0x00,0x04,0x01,0xFF,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            20:0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
IF1 _daveExchangeTCP res from read 41
result of exchange: 0
PDU header:
                            0:0x32,0x03,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x14,0x00,0x00,
plen: 2 dlen: 20
Parameter:
                            0:0x04,0x01,
Data     :
                            0:0xFF,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            10:0x00,0x00,0x00,0x00,
Data hdr :
                            0:0xFF,0x04,0x00,0x80,
Data     :
                            0:0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
error: ok
_daveSetupReceivedPDU() returned: 0=ok
_daveTestReadResult() returned: 0=ok
FD0: 0
FD4: 0
FD8: 0
FD12: 0.000000
Finished.
	 *
	 */
}
}
